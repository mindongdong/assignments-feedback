version: '3.8'

services:
  # PostgreSQL database with Korean language support
  postgres:
    image: postgres:15-alpine
    container_name: assignments-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: assignments_feedback
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--locale=ko_KR.UTF-8 --encoding=UTF8"
      LC_COLLATE: ko_KR.UTF-8
      LC_CTYPE: ko_KR.UTF-8
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/migrations/setup.sql:/docker-entrypoint-initdb.d/01-setup.sql:ro
    networks:
      - assignments-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d assignments_feedback"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements,pg_trgm
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_min_duration_statement=100

  # Redis cache with Korean text optimization
  redis:
    image: redis:7-alpine
    container_name: assignments-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - assignments-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

  # Backend application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: assignments-backend
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-assignments_feedback}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - PORT=3000
      - LOCALE=ko_KR.UTF-8
      - TZ=Asia/Seoul
    volumes:
      - ./:/app
      - /app/node_modules
      - logs_data:/app/logs
    networks:
      - assignments-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  # PgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: assignments-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - assignments-network
    depends_on:
      - postgres
    profiles:
      - development

  # Redis Commander for cache management (development only)
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: assignments-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - "8081:8081"
    networks:
      - assignments-network
    depends_on:
      - redis
    profiles:
      - development

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: assignments-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - assignments-network
    depends_on:
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    name: assignments_postgres_data
  redis_data:
    name: assignments_redis_data
  pgadmin_data:
    name: assignments_pgadmin_data
  logs_data:
    name: assignments_logs_data

networks:
  assignments-network:
    name: assignments-network
    driver: bridge